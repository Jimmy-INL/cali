"""
Wrappers for  Openturns samplers

- http://openturns.github.io/openturns/latest/user_manual/designs_of_experiments.html
"""

import numpy as np
import openturns as ot

from .base_sampler import BaseSampler


class BaseOpenTurnsSequence(BaseSampler):
    """Shared pattern for Open-Turns Sequence Generators

    http://openturns.github.io/openturns/latest/user_manual/_generated/openturns.LowDiscrepancySequence.html#openturns.LowDiscrepancySequence

    Parameters
    ----------
    sampler_class: ot.LowDiscrepancySequence
        Open turns sequence generator
    name: str
        Name attached to class
    problem_setting: dict, optional
        Full problem definition as generated by ``gen_problem``
    parameters: dict, optional
        Problem parameters in the form ``{'names':[], 'bounds':[[float, float],..] }``
    """

    def __init__(self, sampler_class, name, problem_setting=None, parameters=None):
        super(BaseOpenTurnsSequence, self).__init__('Open-turns ' + name,
                                                    problem_setting=problem_setting,
                                                    parameters=parameters)
        self.sequence = ot.LowDiscrepancySequence(sampler_class(self.p['num_vars']))

    def sample(self, sample_size, rng_seed=0):
        """Generate Samples from sequence

        Generates samples from a sequence generator

        Parameters
        ----------
        sample_size: int
            Number of samples to generate
        rng_seed: int, optional
            Unused as samples are produced by sequence generation
        """
        s = np.array(self.sequence.generate(sample_size))
        return self.rescale(s)


class SobolSequence(BaseOpenTurnsSequence):
    """OpenTurns Sobol Sequence

    http://openturns.github.io/openturns/latest/user_manual/_generated/openturns.SobolSequence.html#openturns.SobolSequence
    """
    def __init__(self, problem_setting=None, parameters=None):
        super(SobolSequence, self).__init__(ot.SobolSequence, 'SobolSequence',
                                            problem_setting=problem_setting,
                                            parameters=parameters)
